#!/usr/bin/env python3
import math

def addition(cond):
    '''
    addition
    -
    core.calculate.addition
    '''
    #eval(cond)
    cond = cond.replace(" ", "")
    cond = [int(x) for x in cond.split('+')]
    return sum(cond)


def read(target):
    return list(filter(None, open(target).read().split('\n')))


class fx:
    @staticmethod
    def trigonometry(object):
        object = [x.replace('sin', 'math.sin') for x in object]
        object = [x.replace('cos', 'math.cos') for x in object]
        object = [x.replace('tan', 'math.tan') for x in object]
        return object

    @staticmethod
    def translate(object, z):
        '''
        translate
        ---
        core.translate
        '''

        while z < len(object):
            q = 0

            try:
                while q < len(object[z]):
                    i = 0

                    try:
                        place = [n for n in range(len(object[z])) if object[z][n:n + 2] == ')(']
                        object[z] = f'{object[z][:place[q] + 1]}*{object[z][place[q] + 1:]}'

                    except IndexError:
                        pass


                    while i < 10:
                        try:
                            place = [n for n in range(len(object[z])) if object[z][n:n + 2] == f'{i}(']
                            object[z] = f'{object[z][:place[q] + 1]}*{object[z][place[q] + 1:]}'

                            place = [n for n in range(len(object[z])) if object[z][n:n + 2] == f'){i}']
                            object[z] = f'{object[z][:place[q] + 1]}*{object[z][place[q] + 1:]}'

                        except IndexError:
                            pass

                        i += 1
                    q += 1
                    z += 1

            except IndexError:
                pass

out = []
def output(result):
    out.append(result)


def compile(target):
    '''
    compile
    -
    core.compile
    '''

    object = read(target)
    z = 0

    #fx.translate(object, z)
    #object = fx.trigonometry(object)

    while z < len(object):

        if (' calculate ' in ' '+object[z]+' ') or (' calc ' in ' '+object[z]+' '):
            output(eval(f'{object[z - 1]}'))

        z += 1
        
    if z == len(object):
        z = 0

    while z < len(out):
        print(out[z])
        z += 1


object = []
def instant(input):
    '''
    compile
    -
    core.compile
    '''
    global object
    object.append(input)
    z = 0

    fx.translate(object, z)
    object = fx.trigonometry(object)

    while z < len(object):
        if (' illegalInputTestString ' in ' '+object[z]+' ') or (' a@a.com ' in ' '+object[z]+' '):
            output(eval(f'{object[z - 1]}'))

        if 'calc' == object[z]:
            output(eval(f'{object[z - 1]}'))


        z += 1

    if z == len(object):
        z = 0

    while z < len(out):
        print(out[z])
        z += 1
        object.clear()
        out.clear()


live = 1
written = 0

while live == 1:
    try:
        x = input('> ')
        instant(x)

    except IndexError or ValueError:
        pass

    except NameError:
        print('No value returned')


while written == 1:
    compile('test.math')
    break